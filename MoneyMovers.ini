[demographic]
interaction_id = interaction.id
interaction_type = interaction.type
created_at = interaction.created_at (transform: datetime, data_type: datetime)
first_language = demographic.first_language
gender = demographic.gender

[interaction]
interaction_id = interaction.id
interaction_type = interaction.type
created_at = interaction.created_at (data_type: datetime, transform: datetime)
;created_at_unix = interaction.created_at (data_type: integer, transform: unixtimestamp)
username = interaction.author.username 
is_retweet = twitter.retweeted.id (data_type: integer, transform: exists)
twitter_lang = twitter.lang
twitter_lang =  twitter.retweet.lang
content = interaction.content
first_tag = interaction.tags (transform: first)

[hashtags :iter = list_iterator(interaction.hashtags)]
interaction_id = interaction.id
interaction_type = interaction.type
created_at = interaction.created_at (data_type: datetime, transform: datetime)
hashtag = :iter._value
 
[mentions :iter = list_iterator(interaction.mentions)]
interaction_id = interaction.id
interaction_type = interaction.type
created_at = interaction.created_at (data_type: datetime, transform: datetime, transform: datetime)
mention = :iter._value

[language]
interaction_id = interaction.id
interaction_type = interaction.type
created_at = interaction.created_at (data_type: datetime, transform: datetime)
language = language.tag
confidence = language.confidence

; declare an iterator variable :iter to fetch data using the list iterator, from the "links" root node
[links :iter = parallel_iterator(links)]
interaction_id = interaction.id
interaction_type = interaction.type
created_at = interaction.created_at (data_type: datetime, transform: datetime)
url = :iter.url
title = :iter.title
domain = :iter.url (transform: domain)
normalized_url = :iter.normalized_url
; hops = :iter.hops (data_type: string-array)  ;uncomment for postgres

[links_meta :iter = parallel_iterator(links.meta)]
interaction_id = interaction.id
interaction_type = interaction.type
created_at = interaction.created_at (data_type: datetime, transform: datetime)
charset = :iter.charset
content_type = :iter.content_type
description = :iter.description
language = :iter.lang
; keywords = :iter.keywords (data_type: string-array) ;uncomment for postgres


[salience_content_entities :iter = objectlist_iterator(salience.content.entities)]
interaction_id = interaction.id
interaction_type = interaction.type
created_at = interaction.created_at (data_type: datetime, transform: datetime)
name = :iter.name
entity_type = :iter.type
label = :iter.label
about = :iter.about
sentiment = :iter.sentiment
confidence = :iter.confident

[tag_labels :iter = leaf_iterator(interaction.tag_tree)]
interaction_id = interaction.id
interaction_type = interaction.type
created_at = interaction.created_at (data_type: datetime, transform: datetime)
namespace = :iter._path
label = :iter._value (data_type: string, condition: is_string)
 
[tag_scores :iter = leaf_iterator(interaction.tag_tree)]
interaction_id = interaction.id
interaction_type = interaction.type
created_at = interaction.created_at (data_type: datetime, transform: datetime)
namespace = :iter._path
score = :iter._value (data_type: float, condition: is_float)

[facebook]
interaction_id = interaction.id
created_at = interaction.created_at (transform: datetime, data_type: datetime)
application = facebook.application
author_avatar = facebook.author.avatar
author_link = facebook.author.link
author_name = facebook.author.name
author_id = facebook.author.id
caption = facebook.caption
icon = facebook.icon
post_id = facebook.id
post_type = facebook.type
likes_count = facebook.likes.count
link = facebook.link
message = facebook.message
name = facebook.name
picture = facebook.picture
source = facebook.source
story = facebook.story

[twitter]
interaction_id = interaction.id
interaction_type = interaction.type
created_at = interaction.created_at (data_type: datetime, transform: datetime)
author_username = interaction.author.username
author_language = interaction.author.language
source = interaction.source
interaction_link = interaction.link
user_followers_count = twitter.user.followers_count
retweet_user_followers_count = twitter.retweet.user.followers_count
user_description = twitter.user.description
retweet_user_description = twitter.retweet.user.description
user_timezone = twitter.user.time_zone
retweet_user_timezone = twitter.retweet.user.time_zone
user_location = twitter.user.location
retweet_user_location = twitter.retweet.user.location
twitter_place_country = twitter.place.country
user_verified = twitter.user.verified
retweet_user_verified = twitter.retweet.user.verified
twitter_id = twitter.id
geo_latitude = interaction.geo.latitude 
geo_longitude = interaction.geo.longitude
content = interaction.content
twitter_lang = twitter.lang
retweet_twitter_lang = twitter.retweet.lang
is_retweet = twitter.retweeted.id (data_type: integer, transform: exists)
twitter_retweeted_id = twitter.retweeted.id
retweeted_author_screen_name = twitter.retweeted.user.screen_name
retweet_count = twitter.retweet.count

[lexisnexis]
interaction_id = interaction.id
interaction_type = interaction.type
created_at = interaction.created_at (transform: datetime, data_type: datetime)
id = lexisnexis.id
feedtype = lexisnexis.feedtype
language = lexisnexis.language
load_date = lexisnexis.load.date (transform: datetime, data_type: datetime)
docinfo_lnlni = lexisnexis.docinfo.lnlni
source_name = lexisnexis.source.name

[lexisnexis_indexing_company :iter = objectlist_iterator(lexisnexis.indexing.company.item)]
interaction_id = interaction.id
interaction_type = interaction.type
created_at = interaction.created_at (transform: datetime, data_type: datetime)
term = :iter.term
score = :iter.score
score_percentage = :iter.score (data_type: integer)

[lexisnexis_indexing_ticker :iter = objectlist_iterator(lexisnexis.indexing.ticker.item)]
interaction_id = interaction.id
interaction_type = interaction.type
created_at = interaction.created_at (transform: datetime, data_type: datetime)
term = :iter.term
score = :iter.score
score_percentage = :iter.score (data_type: integer)

